{"version":3,"sources":["/Users/alexrogers/Projects/courgette/website/src/HomePage.scss","/Users/alexrogers/Projects/courgette/website/src/mixins.scss","/Users/alexrogers/Projects/courgette/website/src/nav.scss"],"names":[],"mappings":"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","file":"1.8a6c0009.chunk.css","sourcesContent":["@charset \"UTF-8\";\n@media (max-width: 320px) {\n  .include-media-test {\n    background-color: #def; }\n    .include-media-test:before {\n      content: \"<=phone\"; } }\n\n@media (min-width: 321px) {\n  .include-media-test {\n    background-color: #abc; }\n    .include-media-test:before {\n      content: \">phone\"; } }\n\n@media (min-width: 815px) and (max-width: 1023px) {\n  .include-media-test {\n    background-color: #fed; }\n    .include-media-test:before {\n      content: \">=815px, <desktop\"; } }\n\n@media (min-width: 1024px) {\n  .include-media-test {\n    background-color: #fab; }\n    .include-media-test:before {\n      content: \">=desktop\"; } }\n\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n  .include-media-test:after {\n    content: \"Retina\" !important; } }\n\n.hero {\n  background: var(--c-1);\n  box-shadow: inset 0 0 80px 5px rgba(0, 0, 0, 0.2);\n  text-align: center;\n  padding: 50px 20px;\n  text-transform: uppercase;\n  font-weight: 700;\n  line-height: 2; }\n  @media (min-width: 1024px) {\n    .hero {\n      padding-left: calc((100% - 1000px) / 2);\n      padding-right: calc((100% - 1000px) / 2);\n      margin: 0 auto; } }\n\n.usps {\n  padding: 20px 10px; }\n  .usps small {\n    display: block;\n    text-align: center; }\n  .usps__inner {\n    display: flex;\n    flex-wrap: wrap; }\n  @media (min-width: 1024px) {\n    .usps__inner {\n      padding-left: calc((100% - 1000px) / 2);\n      padding-right: calc((100% - 1000px) / 2);\n      margin: 0 auto; } }\n  .usps .usp {\n    flex: 2;\n    width: 50%;\n    margin: 0 8px 20px;\n    text-align: center; }\n    .usps .usp__icon {\n      width: 100px;\n      height: 100px;\n      background: var(--c-4);\n      border-radius: 50%;\n      margin: 0 auto 10px; }\n    .usps .usp__title {\n      margin: 0 0 10px;\n      font-size: 16px;\n      text-transform: uppercase; }\n    .usps .usp p {\n      margin: 0 0 10px; }\n\n.testimonials {\n  background: var(--c-5);\n  box-shadow: inset 0 0 80px 5px rgba(0, 0, 0, 0.2);\n  padding: 20px;\n  color: white; }\n  @media (min-width: 1024px) {\n    .testimonials {\n      padding-left: calc((100% - 1000px) / 2);\n      padding-right: calc((100% - 1000px) / 2);\n      margin: 0 auto; } }\n  .testimonials .testimonial {\n    position: relative; }\n    .testimonials .testimonial:nth-child(2n) {\n      text-align: right; }\n    .testimonials .testimonial blockquote {\n      display: inline-block;\n      position: relative;\n      padding: 30px 40px 30px 30px;\n      margin: 0;\n      font-size: 18px; }\n      .testimonials .testimonial blockquote::before, .testimonials .testimonial blockquote::after {\n        color: rgba(255, 255, 255, 0.25);\n        font-size: 85px;\n        position: absolute;\n        line-height: 0.5;\n        font-family: Georgia, serif; }\n      .testimonials .testimonial blockquote::before {\n        content: '“';\n        left: 0;\n        top: 20px; }\n      .testimonials .testimonial blockquote::after {\n        content: '”';\n        right: 0;\n        bottom: 0; }\n      .testimonials .testimonial blockquote p {\n        margin: 5px 0 0;\n        font-size: 14px; }\n      .testimonials .testimonial blockquote q::before, .testimonials .testimonial blockquote q::after {\n        content: ''; }\n\n.customers {\n  padding: 30px; }\n  .customers h2 {\n    font-size: 16px;\n    text-transform: uppercase; }\n\n.home {\n  /*background: rgba(220, 220, 220, 1);*/ }\n\n.home-logo {\n  animation: home-logo-spin infinite 20s linear;\n  height: 80px; }\n\n.home-header {\n  padding: 10px;\n  border: 1px solid magenta;\n  display: inline-block;\n  color: #0d69e3; }\n\n.home-title {\n  font-size: 1.5em; }\n\n.home-intro {\n  font-size: large; }\n\n@keyframes home-logo-spin {\n  from {\n    transform: rotate(0deg); }\n  to {\n    transform: rotate(360deg); } }\n","// @import \"compass/css3\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//\n//            http://include-media.com\n//\n//         Author: Eduardo Boucas <mail@eduardoboucas.com>\n//\n///\n/// Creates a list of global breakpoints\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///   'retina2x': (\n///     '(-webkit-min-device-pixel-ratio: 2)',\n///     '(min-resolution: 192dpi)'\n///   )\n/// );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'retina2x': (\n    '(-webkit-min-device-pixel-ratio: 2)',\n    '(min-resolution: 192dpi)'\n  ),\n  'retina3x': (\n    '(-webkit-min-device-pixel-ratio: 3)',\n    '(min-resolution: 350dpi)'\n  )\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media(\">128px\") {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media(\">20em\") {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media(\">2.0rem\") {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1\n) !default;\n///\n/// Generates a media query based on a list of conditions\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { }\n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { }\n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { }\n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\n///\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: '';\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + ', ';\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n///\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $expressions  - list of expressions\n///\n/// @throws `$expression` is not a valid expression\n///\n/// @return {List | Null}\n///\n@function get-query-branches($expressions) {\n  $result: '';\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + ' and ';\n    }\n\n    @if (type-of($expression) == 'string') {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == 'list') {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == 'list') {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join($result, str-replace-first($first, $member, $partial));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n///\n/// Parses a string to form a media query expression\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $expression  - expression (in string)\n///\n/// @throws Expression with type `type-of($expression)` detected, string expected\n/// @throws `$expression` is missing an operator\n/// @throws Unknown unit: `$unit`\n///\n/// @return {String | Null}\n///\n@function parse-expression($expression) {\n  $operator: '';\n  $value: '';\n  $element: '';\n  $result: '';\n  $is-width: true;\n\n  @if (type-of($expression) != 'string') {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == '=') {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n\n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    }\n\n    @if ($operator == '>') {\n      $element: '(min-width: #{$result + $interval})';\n    } @else if ($operator == '<') {\n      $element: '(max-width: #{$result - $interval})';\n    } @else if ($operator == '>=') {\n      $element: '(min-width: #{$result})';\n    } @else if ($operator == '<=') {\n      $element: '(max-width: #{$result})';\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n///\n/// Replaces the first occurence of the string with the replacement string\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $search  - The value being searched for\n/// @param {String}   $replace  - The replacement string\n/// @param {String}   $subject  - The string being replaced on\n///\n/// @return {String | Null}\n///\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n///\n/// Casts a number to a string\n///\n/// @author Hugo Giraudel\n///\n/// @param {String}   $string  - Number to be parsed\n///\n/// @return {List | Null}\n///\n@function to-number($string) {\n  // Matrices\n  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n  $numbers:  0   1   2   3   4   5   6   7   8   9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n\n    @if $character == '-' {\n      $minus: true;\n    }\n\n    @else if $character == '.' {\n      $divider: 1;\n    }\n\n    @else {\n      @if type-of($index) != 'number' {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      }\n\n      @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n\n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';\n  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;\n  $index: index($strings, $unit);\n\n  @if type-of($index) != 'number' {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n\n.include-media-test {\n  @include media(\"<=phone\") {\n    background-color: #def;\n\n    &:before {\n      content: \"<=phone\";\n    }\n  }\n\n  @include media(\">phone\") {\n    background-color: #abc;\n\n    &:before {\n      content: \">phone\";\n    }\n  }\n\n  @include media(\">=815px\", \"<desktop\") {\n    background-color: #fed;\n\n    &:before {\n      content: \">=815px, <desktop\";\n    }\n  }\n\n  @include media(\">=desktop\") {\n    background-color: #fab;\n\n    &:before {\n      content: \">=desktop\";\n    }\n  }\n\n  @include media(\"retina2x\") {\n    &:after {\n      content: \"Retina\" !important;\n    }\n  }\n}","@import './mixins';\n\n:root {\n  --close-size: 24px;\n  --close-color: #000;\n}\n\n.logo {\n  text-transform: uppercase;\n  font-size: 20px;\n  font-weight: bold;\n  position: relative;\n  margin: 0;\n\n  // &::after {\n  //   content: '';\n  //   position: absolute;\n  //   right: -30px;\n\n  //   width: 20px;\n  //   height: 20px;\n  //   background: var(--c-0);\n  //   border-radius: 50%;\n  //   border: 1px solid var(--c-4);\n  // }\n}\n\n.nav {\n  position: sticky;\n  top: 0;\n  background: white;\n  padding: 20px;\n  box-shadow: 0 0 10px 10px rgba(0, 0, 0, 0.13);\n  display: flex;\n  align-items: center;\n  z-index: 10;\n}\n\n.main-nav {\n  ul {\n    margin: 0;\n    padding: 60px 20px;\n  }\n  li {\n    list-style-type: none;\n    border-bottom: 1px solid var(--c-2);\n    margin: 0;\n  }\n  a {\n    color: var(--c-5);\n    padding: 10px;\n    display: block;\n    text-decoration: none;\n\n    &.selected {\n      background: var(--c-5);\n      color: var(--c-1);\n    }\n  }\n}\n\n.close-btn {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  border-radius: 50%;\n  transform: rotateZ(135deg);\n  font-size: 0;\n  border: 0;\n  background: none;\n  padding: 5px;\n  height: 30px;\n  width: 30px;\n  display: block;\n\n  &::after {\n    position: absolute;\n    left: 0;\n    content: '';\n    width: var(--close-size);\n    border-bottom: 3px solid var(--close-color);\n  }\n\n  &::before {\n    position: absolute;\n    left: 0;\n    content: '';\n    width: var(--close-size);\n    border-bottom: 3px solid var(--close-color);\n    transform: rotateZ(90deg);\n  }\n}\n\n.show .overlay-inner {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: #000;\n  opacity: 0.6;\n}\n\n.main-nav {\n  transform: translateX(-100%);\n  transition-delay: 0s;\n  transition-timing-function: cubic-bezier(.4, 0, .2, 1);\n  transition-duration: .35s;\n  transition-property: transform;\n  transform-style: preserve-3d;\n  will-change: transform;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  color: #424242;\n  background-color: #fafafa;\n  pointer-events: all;\n\n  @include media(\">=desktop\") {\n    & {\n      width: 30%;\n      min-width: 500px;\n    }\n  }\n\n  .show & {\n    transition-delay: .07s;\n    transform: translateX(0);\n    border-right: 1px solid #e0e0e0;\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,.14), 0 3px 1px -2px rgba(0,0,0,.2), 0 1px 5px 0 rgba(0,0,0,.12);\n    display: block;\n    overflow: auto;\n  }\n}\n\n.burger {\n  background: white;\n  border: 5px solid white;\n  position: relative;\n  width: 40px;\n  height: 30px;\n  font-size: 0;\n  margin-right: 15px;\n\n  &::before,\n  &::after {\n    position: absolute;\n    content: '';\n    height: calc(50% - 3px);\n    left: 0%;\n    right: 0%;\n    top: 0%;\n    border-top: 3px solid var(--c-4);\n    border-bottom: 3px solid var(--c-4);\n  }\n\n  &::before {\n    top: 100%;\n    height: 0;\n    border-top: 3px solid var(--c-4);\n    border-bottom: none;\n  }\n}"]}