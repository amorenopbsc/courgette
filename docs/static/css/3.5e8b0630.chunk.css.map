{"version":3,"sources":["/Users/alexrogers/Projects/courgette/website/src/mixins.scss","/Users/alexrogers/Projects/courgette/website/src/nav.scss"],"names":[],"mappings":"AAgIE,yBA+NF,oBAEI,qBAAsB,CAF1B,2BAKM,iBAAkB,CAAA,CApOtB,yBA+NF,oBAUI,qBAAsB,CAV1B,2BAaM,gBAAiB,CAAA,CA5OrB,gDA+NF,oBAkBI,qBAAsB,CAlB1B,2BAqBM,2BAA4B,CAAA,CApPhC,0BA+NF,oBA0BI,qBAAsB,CA1B1B,2BA6BM,mBAAoB,CAAA,CA5PxB,kEA+NF,0BAmCM,0BAA4B,CAAA,CChYlC,MACE,iBAAA,CACA,kBAAc,CAGhB,MACE,wBAAA,CACA,cAAA,CACA,eAAA,CACA,iBAAA,CACA,QAAS,CAeX,KACE,uBAAA,CAAA,eAAA,CACA,KAAA,CACA,eAAA,CACA,YAAA,CACA,wCAAA,CACA,YAAA,CACA,kBAAA,CACA,UAAW,CAGb,aAEI,QAAA,CACA,iBAAkB,CAHtB,aAMI,oBAAA,CACA,kCAAA,CACA,QAAS,CARb,YAWI,gBAAA,CACA,YAAA,CACA,aAAA,CACA,oBAAqB,CAdzB,qBAiBM,qBAAA,CACA,gBAAiB,CAKvB,WACE,cAAA,CACA,QAAA,CACA,UAAA,CACA,iBAAA,CACA,gCAAA,CAAA,wBAAA,CACA,WAAA,CACA,QAAA,CACA,eAAA,CACA,WAAA,CACA,WAAA,CACA,UAAA,CACA,aAAc,CAZhB,mCAeI,iBAAA,CACA,MAAA,CACA,UAAA,CACA,UAAA,CAAA,uBAAA,CACA,4BAAA,CAAA,0CASyB,CA5B7B,kBA4BI,+BAAA,CAAA,uBAAyB,CAI7B,qBACE,iBAAA,CAKA,qBAAA,CACA,UAAY,CAGd,+BARE,KAAA,CACA,MAAA,CACA,UAAA,CACA,WAoBmB,CAfrB,UACE,mCAAA,CAAA,2BAAA,CACA,mBAAA,CACA,kDAAA,CACA,wBAAA,CACA,qCAAA,CAAA,6BAAA,CAAA,+CAAA,CACA,mCAAA,CAAA,2BAAA,CACA,qBAAA,CACA,cAAA,CAKA,aAAA,CACA,wBAAA,CACA,kBAAmB,CDUnB,0BCzBF,UAmBM,SAAA,CACA,eAAgB,CAAA,CAIpB,gBACE,qBAAA,CACA,+BAAA,CAAA,uBAAA,CACA,8BAAA,CACA,gGAAA,CACA,aAAA,CACA,aAAc,CAIlB,QACE,eAAA,CACA,qBAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,WAAA,CACA,iBAAkB,CAPpB,6BAWI,iBAAA,CACA,UAAA,CACA,sBAAA,CACA,MAAA,CACA,OAAA,CACA,KAAA,CACA,+BAAA,CACA,kCAAmC,CAlBvC,eAsBI,QAAA,CACA,QAAA,CACA,+BAAA,CACA,kBAAmB","file":"3.5e8b0630.chunk.css","sourcesContent":["// @import \"compass/css3\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//\n//            http://include-media.com\n//\n//         Author: Eduardo Boucas <mail@eduardoboucas.com>\n//\n///\n/// Creates a list of global breakpoints\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///   'retina2x': (\n///     '(-webkit-min-device-pixel-ratio: 2)',\n///     '(min-resolution: 192dpi)'\n///   )\n/// );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'retina2x': (\n    '(-webkit-min-device-pixel-ratio: 2)',\n    '(min-resolution: 192dpi)'\n  ),\n  'retina3x': (\n    '(-webkit-min-device-pixel-ratio: 3)',\n    '(min-resolution: 350dpi)'\n  )\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media(\">128px\") {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media(\">20em\") {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media(\">2.0rem\") {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1\n) !default;\n///\n/// Generates a media query based on a list of conditions\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { }\n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { }\n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { }\n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\n///\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: '';\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + ', ';\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n///\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $expressions  - list of expressions\n///\n/// @throws `$expression` is not a valid expression\n///\n/// @return {List | Null}\n///\n@function get-query-branches($expressions) {\n  $result: '';\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + ' and ';\n    }\n\n    @if (type-of($expression) == 'string') {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == 'list') {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == 'list') {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join($result, str-replace-first($first, $member, $partial));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n///\n/// Parses a string to form a media query expression\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $expression  - expression (in string)\n///\n/// @throws Expression with type `type-of($expression)` detected, string expected\n/// @throws `$expression` is missing an operator\n/// @throws Unknown unit: `$unit`\n///\n/// @return {String | Null}\n///\n@function parse-expression($expression) {\n  $operator: '';\n  $value: '';\n  $element: '';\n  $result: '';\n  $is-width: true;\n\n  @if (type-of($expression) != 'string') {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == '=') {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n\n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    }\n\n    @if ($operator == '>') {\n      $element: '(min-width: #{$result + $interval})';\n    } @else if ($operator == '<') {\n      $element: '(max-width: #{$result - $interval})';\n    } @else if ($operator == '>=') {\n      $element: '(min-width: #{$result})';\n    } @else if ($operator == '<=') {\n      $element: '(max-width: #{$result})';\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n///\n/// Replaces the first occurence of the string with the replacement string\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $search  - The value being searched for\n/// @param {String}   $replace  - The replacement string\n/// @param {String}   $subject  - The string being replaced on\n///\n/// @return {String | Null}\n///\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n///\n/// Casts a number to a string\n///\n/// @author Hugo Giraudel\n///\n/// @param {String}   $string  - Number to be parsed\n///\n/// @return {List | Null}\n///\n@function to-number($string) {\n  // Matrices\n  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n  $numbers:  0   1   2   3   4   5   6   7   8   9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n\n    @if $character == '-' {\n      $minus: true;\n    }\n\n    @else if $character == '.' {\n      $divider: 1;\n    }\n\n    @else {\n      @if type-of($index) != 'number' {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      }\n\n      @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n\n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';\n  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;\n  $index: index($strings, $unit);\n\n  @if type-of($index) != 'number' {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n\n.include-media-test {\n  @include media(\"<=phone\") {\n    background-color: #def;\n\n    &:before {\n      content: \"<=phone\";\n    }\n  }\n\n  @include media(\">phone\") {\n    background-color: #abc;\n\n    &:before {\n      content: \">phone\";\n    }\n  }\n\n  @include media(\">=815px\", \"<desktop\") {\n    background-color: #fed;\n\n    &:before {\n      content: \">=815px, <desktop\";\n    }\n  }\n\n  @include media(\">=desktop\") {\n    background-color: #fab;\n\n    &:before {\n      content: \">=desktop\";\n    }\n  }\n\n  @include media(\"retina2x\") {\n    &:after {\n      content: \"Retina\" !important;\n    }\n  }\n}","@import './mixins';\n\n:root {\n  --close-size: 24px;\n  --close-color: #000;\n}\n\n.logo {\n  text-transform: uppercase;\n  font-size: 20px;\n  font-weight: bold;\n  position: relative;\n  margin: 0;\n\n  // &::after {\n  //   content: '';\n  //   position: absolute;\n  //   right: -30px;\n\n  //   width: 20px;\n  //   height: 20px;\n  //   background: var(--c-0);\n  //   border-radius: 50%;\n  //   border: 1px solid var(--c-4);\n  // }\n}\n\n.nav {\n  position: sticky;\n  top: 0;\n  background: white;\n  padding: 20px;\n  box-shadow: 0 0 10px 10px rgba(0, 0, 0, 0.13);\n  display: flex;\n  align-items: center;\n  z-index: 10;\n}\n\n.main-nav {\n  ul {\n    margin: 0;\n    padding: 60px 20px;\n  }\n  li {\n    list-style-type: none;\n    border-bottom: 1px solid var(--c-2);\n    margin: 0;\n  }\n  a {\n    color: var(--c-5);\n    padding: 10px;\n    display: block;\n    text-decoration: none;\n\n    &.selected {\n      background: var(--c-5);\n      color: var(--c-1);\n    }\n  }\n}\n\n.close-btn {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  border-radius: 50%;\n  transform: rotateZ(135deg);\n  font-size: 0;\n  border: 0;\n  background: none;\n  padding: 5px;\n  height: 30px;\n  width: 30px;\n  display: block;\n\n  &::after {\n    position: absolute;\n    left: 0;\n    content: '';\n    width: var(--close-size);\n    border-bottom: 3px solid var(--close-color);\n  }\n\n  &::before {\n    position: absolute;\n    left: 0;\n    content: '';\n    width: var(--close-size);\n    border-bottom: 3px solid var(--close-color);\n    transform: rotateZ(90deg);\n  }\n}\n\n.show .overlay-inner {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: #000;\n  opacity: 0.6;\n}\n\n.main-nav {\n  transform: translateX(-100%);\n  transition-delay: 0s;\n  transition-timing-function: cubic-bezier(.4, 0, .2, 1);\n  transition-duration: .35s;\n  transition-property: transform;\n  transform-style: preserve-3d;\n  will-change: transform;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  color: #424242;\n  background-color: #fafafa;\n  pointer-events: all;\n\n  @include media(\">=desktop\") {\n    & {\n      width: 30%;\n      min-width: 500px;\n    }\n  }\n\n  .show & {\n    transition-delay: .07s;\n    transform: translateX(0);\n    border-right: 1px solid #e0e0e0;\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,.14), 0 3px 1px -2px rgba(0,0,0,.2), 0 1px 5px 0 rgba(0,0,0,.12);\n    display: block;\n    overflow: auto;\n  }\n}\n\n.burger {\n  background: white;\n  border: 5px solid white;\n  position: relative;\n  width: 40px;\n  height: 30px;\n  font-size: 0;\n  margin-right: 15px;\n\n  &::before,\n  &::after {\n    position: absolute;\n    content: '';\n    height: calc(50% - 3px);\n    left: 0%;\n    right: 0%;\n    top: 0%;\n    border-top: 3px solid var(--c-4);\n    border-bottom: 3px solid var(--c-4);\n  }\n\n  &::before {\n    top: 100%;\n    height: 0;\n    border-top: 3px solid var(--c-4);\n    border-bottom: none;\n  }\n}"]}